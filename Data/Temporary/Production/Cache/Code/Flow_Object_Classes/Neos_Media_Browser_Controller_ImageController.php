<?php 
namespace Neos\Media\Browser\Controller;

/*
 * This file is part of the Neos.Media.Browser package.
 *
 * (c) Contributors of the Neos Project - www.neos.io
 *
 * This package is Open Source Software. For the full copyright and license
 * information, please view the LICENSE file which was distributed with this
 * source code.
 */

use Neos\Flow\Annotations as Flow;
use Neos\Media\Domain\Model\Asset;
use Neos\Media\Domain\Model\AssetSource\AssetSourceAwareInterface;
use Neos\Media\Domain\Model\ImportedAsset;
use Neos\Media\Domain\Repository\ImageRepository;

/**
 * Controller for browsing images in the ImageEditor
 */
class ImageController_Original extends AssetController
{
    /**
     * @Flow\Inject
     * @var ImageRepository
     */
    protected $assetRepository;

    /**
     * @Flow\Inject
     * @var \Neos\Media\Domain\Repository\ImportedAssetRepository
     */
    protected $importedAssetRepository;

    /**
     * @param string $assetSourceIdentifier
     * @param string $assetProxyIdentifier
     * @param Asset $asset
     * @return void
     * @throws \Neos\Flow\Mvc\Exception\StopActionException
     * @throws \Neos\Flow\Mvc\Exception\UnsupportedRequestTypeException
     */
    public function editAction(string $assetSourceIdentifier = null, string $assetProxyIdentifier = null, Asset $asset = null)
    {
        if ($assetSourceIdentifier !== null && $assetProxyIdentifier !== null) {
            parent::editAction($assetSourceIdentifier, $assetProxyIdentifier);
            return;
        } elseif ($asset instanceof AssetSourceAwareInterface) {
            /** @var ImportedAsset $importedAsset */
            $importedAsset = $this->importedAssetRepository->findOneByLocalAssetIdentifier($asset->getIdentifier());
            parent::editAction($asset->getAssetSourceIdentifier(), $importedAsset ? $importedAsset->getRemoteAssetIdentifier() : $asset->getIdentifier());
            return;
        }
        $this->response->setStatus(400, 'Invalid arguments');
    }
}

#
# Start of Flow generated Proxy code
#
namespace Neos\Media\Browser\Controller;

use Doctrine\ORM\Mapping as ORM;
use Neos\Flow\Annotations as Flow;

/**
 * Controller for browsing images in the ImageEditor
 */
class ImageController extends ImageController_Original implements \Neos\Flow\ObjectManagement\Proxy\ProxyInterface {

    use \Neos\Flow\Aop\AdvicesTrait, \Neos\Flow\ObjectManagement\Proxy\ObjectSerializationTrait, \Neos\Flow\ObjectManagement\DependencyInjection\PropertyInjectionTrait;

    private $Flow_Aop_Proxy_targetMethodsAndGroupedAdvices = array();

    private $Flow_Aop_Proxy_groupedAdviceChains = array();

    private $Flow_Aop_Proxy_methodIsInAdviceMode = array();


    /**
     * Autogenerated Proxy Method
     */
    public function __construct()
    {

        $this->Flow_Aop_Proxy_buildMethodsAndAdvicesArray();
        if ('Neos\Media\Browser\Controller\ImageController' === get_class($this)) {
            $this->Flow_Proxy_injectProperties();
        }

        $isSameClass = get_class($this) === 'Neos\Media\Browser\Controller\ImageController';
        if ($isSameClass) {
            $this->initializeObject(1);
        }
    }

    /**
     * Autogenerated Proxy Method
     */
    protected function Flow_Aop_Proxy_buildMethodsAndAdvicesArray()
    {
        if (method_exists(get_parent_class(), 'Flow_Aop_Proxy_buildMethodsAndAdvicesArray') && is_callable('parent::Flow_Aop_Proxy_buildMethodsAndAdvicesArray')) parent::Flow_Aop_Proxy_buildMethodsAndAdvicesArray();

        $objectManager = \Neos\Flow\Core\Bootstrap::$staticObjectManager;
        $this->Flow_Aop_Proxy_targetMethodsAndGroupedAdvices = array(
            'editAction' => array(
                'Neos\Flow\Aop\Advice\AroundAdvice' => array(
                    new \Neos\Flow\Aop\Advice\AroundAdvice('Neos\Flow\Security\Aspect\PolicyEnforcementAspect', 'enforcePolicy', $objectManager, NULL),
                ),
            ),
            'indexAction' => array(
                'Neos\Flow\Aop\Advice\AroundAdvice' => array(
                    new \Neos\Flow\Aop\Advice\AroundAdvice('Neos\Flow\Security\Aspect\PolicyEnforcementAspect', 'enforcePolicy', $objectManager, NULL),
                ),
            ),
            'newAction' => array(
                'Neos\Flow\Aop\Advice\AroundAdvice' => array(
                    new \Neos\Flow\Aop\Advice\AroundAdvice('Neos\Flow\Security\Aspect\PolicyEnforcementAspect', 'enforcePolicy', $objectManager, NULL),
                ),
            ),
            'replaceAssetResourceAction' => array(
                'Neos\Flow\Aop\Advice\AroundAdvice' => array(
                    new \Neos\Flow\Aop\Advice\AroundAdvice('Neos\Flow\Security\Aspect\PolicyEnforcementAspect', 'enforcePolicy', $objectManager, NULL),
                ),
            ),
            'showAction' => array(
                'Neos\Flow\Aop\Advice\AroundAdvice' => array(
                    new \Neos\Flow\Aop\Advice\AroundAdvice('Neos\Flow\Security\Aspect\PolicyEnforcementAspect', 'enforcePolicy', $objectManager, NULL),
                ),
            ),
            'updateAction' => array(
                'Neos\Flow\Aop\Advice\AroundAdvice' => array(
                    new \Neos\Flow\Aop\Advice\AroundAdvice('Neos\Flow\Security\Aspect\PolicyEnforcementAspect', 'enforcePolicy', $objectManager, NULL),
                ),
            ),
            'initializeCreateAction' => array(
                'Neos\Flow\Aop\Advice\AroundAdvice' => array(
                    new \Neos\Flow\Aop\Advice\AroundAdvice('Neos\Flow\Security\Aspect\PolicyEnforcementAspect', 'enforcePolicy', $objectManager, NULL),
                ),
            ),
            'createAction' => array(
                'Neos\Flow\Aop\Advice\AroundAdvice' => array(
                    new \Neos\Flow\Aop\Advice\AroundAdvice('Neos\Flow\Security\Aspect\PolicyEnforcementAspect', 'enforcePolicy', $objectManager, NULL),
                ),
            ),
            'initializeUploadAction' => array(
                'Neos\Flow\Aop\Advice\AroundAdvice' => array(
                    new \Neos\Flow\Aop\Advice\AroundAdvice('Neos\Flow\Security\Aspect\PolicyEnforcementAspect', 'enforcePolicy', $objectManager, NULL),
                ),
            ),
            'uploadAction' => array(
                'Neos\Flow\Aop\Advice\AroundAdvice' => array(
                    new \Neos\Flow\Aop\Advice\AroundAdvice('Neos\Flow\Security\Aspect\PolicyEnforcementAspect', 'enforcePolicy', $objectManager, NULL),
                ),
            ),
            'tagAssetAction' => array(
                'Neos\Flow\Aop\Advice\AroundAdvice' => array(
                    new \Neos\Flow\Aop\Advice\AroundAdvice('Neos\Flow\Security\Aspect\PolicyEnforcementAspect', 'enforcePolicy', $objectManager, NULL),
                ),
            ),
            'addAssetToCollectionAction' => array(
                'Neos\Flow\Aop\Advice\AroundAdvice' => array(
                    new \Neos\Flow\Aop\Advice\AroundAdvice('Neos\Flow\Security\Aspect\PolicyEnforcementAspect', 'enforcePolicy', $objectManager, NULL),
                ),
            ),
            'deleteAction' => array(
                'Neos\Flow\Aop\Advice\AroundAdvice' => array(
                    new \Neos\Flow\Aop\Advice\AroundAdvice('Neos\Flow\Security\Aspect\PolicyEnforcementAspect', 'enforcePolicy', $objectManager, NULL),
                ),
            ),
            'updateAssetResourceAction' => array(
                'Neos\Flow\Aop\Advice\AroundAdvice' => array(
                    new \Neos\Flow\Aop\Advice\AroundAdvice('Neos\Flow\Security\Aspect\PolicyEnforcementAspect', 'enforcePolicy', $objectManager, NULL),
                ),
            ),
            'relatedNodesAction' => array(
                'Neos\Flow\Aop\Advice\AroundAdvice' => array(
                    new \Neos\Flow\Aop\Advice\AroundAdvice('Neos\Flow\Security\Aspect\PolicyEnforcementAspect', 'enforcePolicy', $objectManager, NULL),
                ),
            ),
            'createTagAction' => array(
                'Neos\Flow\Aop\Advice\AroundAdvice' => array(
                    new \Neos\Flow\Aop\Advice\AroundAdvice('Neos\Flow\Security\Aspect\PolicyEnforcementAspect', 'enforcePolicy', $objectManager, NULL),
                ),
            ),
            'editTagAction' => array(
                'Neos\Flow\Aop\Advice\AroundAdvice' => array(
                    new \Neos\Flow\Aop\Advice\AroundAdvice('Neos\Flow\Security\Aspect\PolicyEnforcementAspect', 'enforcePolicy', $objectManager, NULL),
                ),
            ),
            'updateTagAction' => array(
                'Neos\Flow\Aop\Advice\AroundAdvice' => array(
                    new \Neos\Flow\Aop\Advice\AroundAdvice('Neos\Flow\Security\Aspect\PolicyEnforcementAspect', 'enforcePolicy', $objectManager, NULL),
                ),
            ),
            'deleteTagAction' => array(
                'Neos\Flow\Aop\Advice\AroundAdvice' => array(
                    new \Neos\Flow\Aop\Advice\AroundAdvice('Neos\Flow\Security\Aspect\PolicyEnforcementAspect', 'enforcePolicy', $objectManager, NULL),
                ),
            ),
            'createAssetCollectionAction' => array(
                'Neos\Flow\Aop\Advice\AroundAdvice' => array(
                    new \Neos\Flow\Aop\Advice\AroundAdvice('Neos\Flow\Security\Aspect\PolicyEnforcementAspect', 'enforcePolicy', $objectManager, NULL),
                ),
            ),
            'editAssetCollectionAction' => array(
                'Neos\Flow\Aop\Advice\AroundAdvice' => array(
                    new \Neos\Flow\Aop\Advice\AroundAdvice('Neos\Flow\Security\Aspect\PolicyEnforcementAspect', 'enforcePolicy', $objectManager, NULL),
                ),
            ),
            'updateAssetCollectionAction' => array(
                'Neos\Flow\Aop\Advice\AroundAdvice' => array(
                    new \Neos\Flow\Aop\Advice\AroundAdvice('Neos\Flow\Security\Aspect\PolicyEnforcementAspect', 'enforcePolicy', $objectManager, NULL),
                ),
            ),
            'deleteAssetCollectionAction' => array(
                'Neos\Flow\Aop\Advice\AroundAdvice' => array(
                    new \Neos\Flow\Aop\Advice\AroundAdvice('Neos\Flow\Security\Aspect\PolicyEnforcementAspect', 'enforcePolicy', $objectManager, NULL),
                ),
            ),
        );
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __wakeup()
    {

        $this->Flow_Aop_Proxy_buildMethodsAndAdvicesArray();

        $this->Flow_setRelatedEntities();
        $this->Flow_Proxy_injectProperties();
            $result = NULL;
        if (method_exists(get_parent_class(), '__wakeup') && is_callable('parent::__wakeup')) parent::__wakeup();

        $isSameClass = get_class($this) === 'Neos\Media\Browser\Controller\ImageController';
        $classParents = class_parents($this);
        $classImplements = class_implements($this);
        $isClassProxy = array_search('Neos\Media\Browser\Controller\ImageController', $classParents) !== false && array_search('Doctrine\ORM\Proxy\Proxy', $classImplements) !== false;

        if ($isSameClass || $isClassProxy) {
            $this->initializeObject(2);
        }
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __clone()
    {

        $this->Flow_Aop_Proxy_buildMethodsAndAdvicesArray();
    }

    /**
     * Autogenerated Proxy Method
     * @param string $assetSourceIdentifier
     * @param string $assetProxyIdentifier
     * @param Asset $asset
     * @return void
     * @throws \Neos\Flow\Mvc\Exception\StopActionException
     * @throws \Neos\Flow\Mvc\Exception\UnsupportedRequestTypeException
     */
    public function editAction(string $assetSourceIdentifier = NULL, string $assetProxyIdentifier = NULL, \Neos\Media\Domain\Model\Asset $asset = NULL)
    {

        if (isset($this->Flow_Aop_Proxy_methodIsInAdviceMode['editAction'])) {
            $result = parent::editAction($assetSourceIdentifier, $assetProxyIdentifier, $asset);

        } else {
            $this->Flow_Aop_Proxy_methodIsInAdviceMode['editAction'] = true;
            try {
            
                $methodArguments = [];

                $methodArguments['assetSourceIdentifier'] = $assetSourceIdentifier;
                $methodArguments['assetProxyIdentifier'] = $assetProxyIdentifier;
                $methodArguments['asset'] = $asset;
            
                $adviceChains = $this->Flow_Aop_Proxy_getAdviceChains('editAction');
                $adviceChain = $adviceChains['Neos\Flow\Aop\Advice\AroundAdvice'];
                $adviceChain->rewind();
                $joinPoint = new \Neos\Flow\Aop\JoinPoint($this, 'Neos\Media\Browser\Controller\ImageController', 'editAction', $methodArguments, $adviceChain);
                $result = $adviceChain->proceed($joinPoint);
                $methodArguments = $joinPoint->getMethodArguments();

            } catch (\Exception $exception) {
                unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['editAction']);
                throw $exception;
            }
            unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['editAction']);
        }
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     * @param string $view
     * @param string $sortBy
     * @param string $sortDirection
     * @param string $filter
     * @param int $tagMode
     * @param Tag $tag
     * @param string $searchTerm
     * @param int $collectionMode
     * @param AssetCollection $assetCollection
     * @param string $assetSourceIdentifier
     * @return void
     * @throws \Neos\Utility\Exception\FilesException
     */
    public function indexAction($view = NULL, $sortBy = NULL, $sortDirection = NULL, $filter = NULL, $tagMode = 0, \Neos\Media\Domain\Model\Tag $tag = NULL, $searchTerm = NULL, $collectionMode = 0, \Neos\Media\Domain\Model\AssetCollection $assetCollection = NULL, $assetSourceIdentifier = NULL)
    {

        if (isset($this->Flow_Aop_Proxy_methodIsInAdviceMode['indexAction'])) {
            $result = parent::indexAction($view, $sortBy, $sortDirection, $filter, $tagMode, $tag, $searchTerm, $collectionMode, $assetCollection, $assetSourceIdentifier);

        } else {
            $this->Flow_Aop_Proxy_methodIsInAdviceMode['indexAction'] = true;
            try {
            
                $methodArguments = [];

                $methodArguments['view'] = $view;
                $methodArguments['sortBy'] = $sortBy;
                $methodArguments['sortDirection'] = $sortDirection;
                $methodArguments['filter'] = $filter;
                $methodArguments['tagMode'] = $tagMode;
                $methodArguments['tag'] = $tag;
                $methodArguments['searchTerm'] = $searchTerm;
                $methodArguments['collectionMode'] = $collectionMode;
                $methodArguments['assetCollection'] = $assetCollection;
                $methodArguments['assetSourceIdentifier'] = $assetSourceIdentifier;
            
                $adviceChains = $this->Flow_Aop_Proxy_getAdviceChains('indexAction');
                $adviceChain = $adviceChains['Neos\Flow\Aop\Advice\AroundAdvice'];
                $adviceChain->rewind();
                $joinPoint = new \Neos\Flow\Aop\JoinPoint($this, 'Neos\Media\Browser\Controller\ImageController', 'indexAction', $methodArguments, $adviceChain);
                $result = $adviceChain->proceed($joinPoint);
                $methodArguments = $joinPoint->getMethodArguments();

            } catch (\Exception $exception) {
                unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['indexAction']);
                throw $exception;
            }
            unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['indexAction']);
        }
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     * @return void
     */
    public function newAction()
    {

        if (isset($this->Flow_Aop_Proxy_methodIsInAdviceMode['newAction'])) {
            $result = parent::newAction();

        } else {
            $this->Flow_Aop_Proxy_methodIsInAdviceMode['newAction'] = true;
            try {
            
                $methodArguments = [];

                $adviceChains = $this->Flow_Aop_Proxy_getAdviceChains('newAction');
                $adviceChain = $adviceChains['Neos\Flow\Aop\Advice\AroundAdvice'];
                $adviceChain->rewind();
                $joinPoint = new \Neos\Flow\Aop\JoinPoint($this, 'Neos\Media\Browser\Controller\ImageController', 'newAction', $methodArguments, $adviceChain);
                $result = $adviceChain->proceed($joinPoint);
                $methodArguments = $joinPoint->getMethodArguments();

            } catch (\Exception $exception) {
                unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['newAction']);
                throw $exception;
            }
            unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['newAction']);
        }
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     * @param Asset $asset
     * @return void
     */
    public function replaceAssetResourceAction(\Neos\Media\Domain\Model\Asset $asset)
    {

        if (isset($this->Flow_Aop_Proxy_methodIsInAdviceMode['replaceAssetResourceAction'])) {
            $result = parent::replaceAssetResourceAction($asset);

        } else {
            $this->Flow_Aop_Proxy_methodIsInAdviceMode['replaceAssetResourceAction'] = true;
            try {
            
                $methodArguments = [];

                $methodArguments['asset'] = $asset;
            
                $adviceChains = $this->Flow_Aop_Proxy_getAdviceChains('replaceAssetResourceAction');
                $adviceChain = $adviceChains['Neos\Flow\Aop\Advice\AroundAdvice'];
                $adviceChain->rewind();
                $joinPoint = new \Neos\Flow\Aop\JoinPoint($this, 'Neos\Media\Browser\Controller\ImageController', 'replaceAssetResourceAction', $methodArguments, $adviceChain);
                $result = $adviceChain->proceed($joinPoint);
                $methodArguments = $joinPoint->getMethodArguments();

            } catch (\Exception $exception) {
                unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['replaceAssetResourceAction']);
                throw $exception;
            }
            unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['replaceAssetResourceAction']);
        }
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     * @param string $assetSourceIdentifier
     * @param string $assetProxyIdentifier
     * @return void
     * @throws StopActionException
     * @throws UnsupportedRequestTypeException
     */
    public function showAction(string $assetSourceIdentifier, string $assetProxyIdentifier)
    {

        if (isset($this->Flow_Aop_Proxy_methodIsInAdviceMode['showAction'])) {
            $result = parent::showAction($assetSourceIdentifier, $assetProxyIdentifier);

        } else {
            $this->Flow_Aop_Proxy_methodIsInAdviceMode['showAction'] = true;
            try {
            
                $methodArguments = [];

                $methodArguments['assetSourceIdentifier'] = $assetSourceIdentifier;
                $methodArguments['assetProxyIdentifier'] = $assetProxyIdentifier;
            
                $adviceChains = $this->Flow_Aop_Proxy_getAdviceChains('showAction');
                $adviceChain = $adviceChains['Neos\Flow\Aop\Advice\AroundAdvice'];
                $adviceChain->rewind();
                $joinPoint = new \Neos\Flow\Aop\JoinPoint($this, 'Neos\Media\Browser\Controller\ImageController', 'showAction', $methodArguments, $adviceChain);
                $result = $adviceChain->proceed($joinPoint);
                $methodArguments = $joinPoint->getMethodArguments();

            } catch (\Exception $exception) {
                unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['showAction']);
                throw $exception;
            }
            unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['showAction']);
        }
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     * @param Asset $asset
     * @return void
     * @throws StopActionException
     */
    public function updateAction(\Neos\Media\Domain\Model\Asset $asset)
    {

        if (isset($this->Flow_Aop_Proxy_methodIsInAdviceMode['updateAction'])) {
            $result = parent::updateAction($asset);

        } else {
            $this->Flow_Aop_Proxy_methodIsInAdviceMode['updateAction'] = true;
            try {
            
                $methodArguments = [];

                $methodArguments['asset'] = $asset;
            
                $adviceChains = $this->Flow_Aop_Proxy_getAdviceChains('updateAction');
                $adviceChain = $adviceChains['Neos\Flow\Aop\Advice\AroundAdvice'];
                $adviceChain->rewind();
                $joinPoint = new \Neos\Flow\Aop\JoinPoint($this, 'Neos\Media\Browser\Controller\ImageController', 'updateAction', $methodArguments, $adviceChain);
                $result = $adviceChain->proceed($joinPoint);
                $methodArguments = $joinPoint->getMethodArguments();

            } catch (\Exception $exception) {
                unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['updateAction']);
                throw $exception;
            }
            unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['updateAction']);
        }
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     * @return void
     * @throws \Neos\Flow\Mvc\Exception\NoSuchArgumentException
     */
    protected function initializeCreateAction()
    {

        if (isset($this->Flow_Aop_Proxy_methodIsInAdviceMode['initializeCreateAction'])) {
            $result = parent::initializeCreateAction();

        } else {
            $this->Flow_Aop_Proxy_methodIsInAdviceMode['initializeCreateAction'] = true;
            try {
            
                $methodArguments = [];

                $adviceChains = $this->Flow_Aop_Proxy_getAdviceChains('initializeCreateAction');
                $adviceChain = $adviceChains['Neos\Flow\Aop\Advice\AroundAdvice'];
                $adviceChain->rewind();
                $joinPoint = new \Neos\Flow\Aop\JoinPoint($this, 'Neos\Media\Browser\Controller\ImageController', 'initializeCreateAction', $methodArguments, $adviceChain);
                $result = $adviceChain->proceed($joinPoint);
                $methodArguments = $joinPoint->getMethodArguments();

            } catch (\Exception $exception) {
                unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['initializeCreateAction']);
                throw $exception;
            }
            unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['initializeCreateAction']);
        }
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     * @param Asset $asset
     * @return void
     * @throws StopActionException
     */
    public function createAction(\Neos\Media\Domain\Model\Asset $asset)
    {

        if (isset($this->Flow_Aop_Proxy_methodIsInAdviceMode['createAction'])) {
            $result = parent::createAction($asset);

        } else {
            $this->Flow_Aop_Proxy_methodIsInAdviceMode['createAction'] = true;
            try {
            
                $methodArguments = [];

                $methodArguments['asset'] = $asset;
            
                $adviceChains = $this->Flow_Aop_Proxy_getAdviceChains('createAction');
                $adviceChain = $adviceChains['Neos\Flow\Aop\Advice\AroundAdvice'];
                $adviceChain->rewind();
                $joinPoint = new \Neos\Flow\Aop\JoinPoint($this, 'Neos\Media\Browser\Controller\ImageController', 'createAction', $methodArguments, $adviceChain);
                $result = $adviceChain->proceed($joinPoint);
                $methodArguments = $joinPoint->getMethodArguments();

            } catch (\Exception $exception) {
                unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['createAction']);
                throw $exception;
            }
            unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['createAction']);
        }
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     * @return void
     * @throws \Neos\Flow\Mvc\Exception\NoSuchArgumentException
     */
    protected function initializeUploadAction()
    {

        if (isset($this->Flow_Aop_Proxy_methodIsInAdviceMode['initializeUploadAction'])) {
            $result = parent::initializeUploadAction();

        } else {
            $this->Flow_Aop_Proxy_methodIsInAdviceMode['initializeUploadAction'] = true;
            try {
            
                $methodArguments = [];

                $adviceChains = $this->Flow_Aop_Proxy_getAdviceChains('initializeUploadAction');
                $adviceChain = $adviceChains['Neos\Flow\Aop\Advice\AroundAdvice'];
                $adviceChain->rewind();
                $joinPoint = new \Neos\Flow\Aop\JoinPoint($this, 'Neos\Media\Browser\Controller\ImageController', 'initializeUploadAction', $methodArguments, $adviceChain);
                $result = $adviceChain->proceed($joinPoint);
                $methodArguments = $joinPoint->getMethodArguments();

            } catch (\Exception $exception) {
                unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['initializeUploadAction']);
                throw $exception;
            }
            unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['initializeUploadAction']);
        }
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     * @param Asset $asset
     * @return string
     * @throws \Neos\Flow\Persistence\Exception\IllegalObjectTypeException
     */
    public function uploadAction(\Neos\Media\Domain\Model\Asset $asset)
    {

        if (isset($this->Flow_Aop_Proxy_methodIsInAdviceMode['uploadAction'])) {
            $result = parent::uploadAction($asset);

        } else {
            $this->Flow_Aop_Proxy_methodIsInAdviceMode['uploadAction'] = true;
            try {
            
                $methodArguments = [];

                $methodArguments['asset'] = $asset;
            
                $adviceChains = $this->Flow_Aop_Proxy_getAdviceChains('uploadAction');
                $adviceChain = $adviceChains['Neos\Flow\Aop\Advice\AroundAdvice'];
                $adviceChain->rewind();
                $joinPoint = new \Neos\Flow\Aop\JoinPoint($this, 'Neos\Media\Browser\Controller\ImageController', 'uploadAction', $methodArguments, $adviceChain);
                $result = $adviceChain->proceed($joinPoint);
                $methodArguments = $joinPoint->getMethodArguments();

            } catch (\Exception $exception) {
                unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['uploadAction']);
                throw $exception;
            }
            unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['uploadAction']);
        }
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     * @param Asset $asset
     * @param Tag $tag
     * @return void
     */
    public function tagAssetAction(\Neos\Media\Domain\Model\Asset $asset, \Neos\Media\Domain\Model\Tag $tag)
    {

        if (isset($this->Flow_Aop_Proxy_methodIsInAdviceMode['tagAssetAction'])) {
            $result = parent::tagAssetAction($asset, $tag);

        } else {
            $this->Flow_Aop_Proxy_methodIsInAdviceMode['tagAssetAction'] = true;
            try {
            
                $methodArguments = [];

                $methodArguments['asset'] = $asset;
                $methodArguments['tag'] = $tag;
            
                $adviceChains = $this->Flow_Aop_Proxy_getAdviceChains('tagAssetAction');
                $adviceChain = $adviceChains['Neos\Flow\Aop\Advice\AroundAdvice'];
                $adviceChain->rewind();
                $joinPoint = new \Neos\Flow\Aop\JoinPoint($this, 'Neos\Media\Browser\Controller\ImageController', 'tagAssetAction', $methodArguments, $adviceChain);
                $result = $adviceChain->proceed($joinPoint);
                $methodArguments = $joinPoint->getMethodArguments();

            } catch (\Exception $exception) {
                unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['tagAssetAction']);
                throw $exception;
            }
            unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['tagAssetAction']);
        }
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     * @param Asset $asset
     * @param AssetCollection $assetCollection
     * @return void
     */
    public function addAssetToCollectionAction(\Neos\Media\Domain\Model\Asset $asset, \Neos\Media\Domain\Model\AssetCollection $assetCollection)
    {

        if (isset($this->Flow_Aop_Proxy_methodIsInAdviceMode['addAssetToCollectionAction'])) {
            $result = parent::addAssetToCollectionAction($asset, $assetCollection);

        } else {
            $this->Flow_Aop_Proxy_methodIsInAdviceMode['addAssetToCollectionAction'] = true;
            try {
            
                $methodArguments = [];

                $methodArguments['asset'] = $asset;
                $methodArguments['assetCollection'] = $assetCollection;
            
                $adviceChains = $this->Flow_Aop_Proxy_getAdviceChains('addAssetToCollectionAction');
                $adviceChain = $adviceChains['Neos\Flow\Aop\Advice\AroundAdvice'];
                $adviceChain->rewind();
                $joinPoint = new \Neos\Flow\Aop\JoinPoint($this, 'Neos\Media\Browser\Controller\ImageController', 'addAssetToCollectionAction', $methodArguments, $adviceChain);
                $result = $adviceChain->proceed($joinPoint);
                $methodArguments = $joinPoint->getMethodArguments();

            } catch (\Exception $exception) {
                unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['addAssetToCollectionAction']);
                throw $exception;
            }
            unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['addAssetToCollectionAction']);
        }
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     * @param Asset $asset
     * @return void
     */
    public function deleteAction(\Neos\Media\Domain\Model\Asset $asset)
    {

        if (isset($this->Flow_Aop_Proxy_methodIsInAdviceMode['deleteAction'])) {
            $result = parent::deleteAction($asset);

        } else {
            $this->Flow_Aop_Proxy_methodIsInAdviceMode['deleteAction'] = true;
            try {
            
                $methodArguments = [];

                $methodArguments['asset'] = $asset;
            
                $adviceChains = $this->Flow_Aop_Proxy_getAdviceChains('deleteAction');
                $adviceChain = $adviceChains['Neos\Flow\Aop\Advice\AroundAdvice'];
                $adviceChain->rewind();
                $joinPoint = new \Neos\Flow\Aop\JoinPoint($this, 'Neos\Media\Browser\Controller\ImageController', 'deleteAction', $methodArguments, $adviceChain);
                $result = $adviceChain->proceed($joinPoint);
                $methodArguments = $joinPoint->getMethodArguments();

            } catch (\Exception $exception) {
                unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['deleteAction']);
                throw $exception;
            }
            unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['deleteAction']);
        }
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     * @param AssetInterface $asset
     * @param PersistentResource $resource
     * @param array $options
     * @throws InvalidArgumentValueException
     * @return void
     */
    public function updateAssetResourceAction(\Neos\Media\Domain\Model\AssetInterface $asset, \Neos\Flow\ResourceManagement\PersistentResource $resource, array $options = array())
    {

        if (isset($this->Flow_Aop_Proxy_methodIsInAdviceMode['updateAssetResourceAction'])) {
            $result = parent::updateAssetResourceAction($asset, $resource, $options);

        } else {
            $this->Flow_Aop_Proxy_methodIsInAdviceMode['updateAssetResourceAction'] = true;
            try {
            
                $methodArguments = [];

                $methodArguments['asset'] = $asset;
                $methodArguments['resource'] = $resource;
                $methodArguments['options'] = $options;
            
                $adviceChains = $this->Flow_Aop_Proxy_getAdviceChains('updateAssetResourceAction');
                $adviceChain = $adviceChains['Neos\Flow\Aop\Advice\AroundAdvice'];
                $adviceChain->rewind();
                $joinPoint = new \Neos\Flow\Aop\JoinPoint($this, 'Neos\Media\Browser\Controller\ImageController', 'updateAssetResourceAction', $methodArguments, $adviceChain);
                $result = $adviceChain->proceed($joinPoint);
                $methodArguments = $joinPoint->getMethodArguments();

            } catch (\Exception $exception) {
                unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['updateAssetResourceAction']);
                throw $exception;
            }
            unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['updateAssetResourceAction']);
        }
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     * @param AssetInterface $asset
     * @return void
     */
    public function relatedNodesAction(\Neos\Media\Domain\Model\AssetInterface $asset)
    {

        if (isset($this->Flow_Aop_Proxy_methodIsInAdviceMode['relatedNodesAction'])) {
            $result = parent::relatedNodesAction($asset);

        } else {
            $this->Flow_Aop_Proxy_methodIsInAdviceMode['relatedNodesAction'] = true;
            try {
            
                $methodArguments = [];

                $methodArguments['asset'] = $asset;
            
                $adviceChains = $this->Flow_Aop_Proxy_getAdviceChains('relatedNodesAction');
                $adviceChain = $adviceChains['Neos\Flow\Aop\Advice\AroundAdvice'];
                $adviceChain->rewind();
                $joinPoint = new \Neos\Flow\Aop\JoinPoint($this, 'Neos\Media\Browser\Controller\ImageController', 'relatedNodesAction', $methodArguments, $adviceChain);
                $result = $adviceChain->proceed($joinPoint);
                $methodArguments = $joinPoint->getMethodArguments();

            } catch (\Exception $exception) {
                unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['relatedNodesAction']);
                throw $exception;
            }
            unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['relatedNodesAction']);
        }
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     * @param string $label
     * @return void
     * @\Neos\Flow\Annotations\Validate(type="NotEmpty", argumentName="label")
     * @\Neos\Flow\Annotations\Validate(type="Label", argumentName="label")
     */
    public function createTagAction($label)
    {

        if (isset($this->Flow_Aop_Proxy_methodIsInAdviceMode['createTagAction'])) {
            $result = parent::createTagAction($label);

        } else {
            $this->Flow_Aop_Proxy_methodIsInAdviceMode['createTagAction'] = true;
            try {
            
                $methodArguments = [];

                $methodArguments['label'] = $label;
            
                $adviceChains = $this->Flow_Aop_Proxy_getAdviceChains('createTagAction');
                $adviceChain = $adviceChains['Neos\Flow\Aop\Advice\AroundAdvice'];
                $adviceChain->rewind();
                $joinPoint = new \Neos\Flow\Aop\JoinPoint($this, 'Neos\Media\Browser\Controller\ImageController', 'createTagAction', $methodArguments, $adviceChain);
                $result = $adviceChain->proceed($joinPoint);
                $methodArguments = $joinPoint->getMethodArguments();

            } catch (\Exception $exception) {
                unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['createTagAction']);
                throw $exception;
            }
            unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['createTagAction']);
        }
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     * @param Tag $tag
     * @return void
     */
    public function editTagAction(\Neos\Media\Domain\Model\Tag $tag)
    {

        if (isset($this->Flow_Aop_Proxy_methodIsInAdviceMode['editTagAction'])) {
            $result = parent::editTagAction($tag);

        } else {
            $this->Flow_Aop_Proxy_methodIsInAdviceMode['editTagAction'] = true;
            try {
            
                $methodArguments = [];

                $methodArguments['tag'] = $tag;
            
                $adviceChains = $this->Flow_Aop_Proxy_getAdviceChains('editTagAction');
                $adviceChain = $adviceChains['Neos\Flow\Aop\Advice\AroundAdvice'];
                $adviceChain->rewind();
                $joinPoint = new \Neos\Flow\Aop\JoinPoint($this, 'Neos\Media\Browser\Controller\ImageController', 'editTagAction', $methodArguments, $adviceChain);
                $result = $adviceChain->proceed($joinPoint);
                $methodArguments = $joinPoint->getMethodArguments();

            } catch (\Exception $exception) {
                unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['editTagAction']);
                throw $exception;
            }
            unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['editTagAction']);
        }
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     * @param Tag $tag
     * @return void
     */
    public function updateTagAction(\Neos\Media\Domain\Model\Tag $tag)
    {

        if (isset($this->Flow_Aop_Proxy_methodIsInAdviceMode['updateTagAction'])) {
            $result = parent::updateTagAction($tag);

        } else {
            $this->Flow_Aop_Proxy_methodIsInAdviceMode['updateTagAction'] = true;
            try {
            
                $methodArguments = [];

                $methodArguments['tag'] = $tag;
            
                $adviceChains = $this->Flow_Aop_Proxy_getAdviceChains('updateTagAction');
                $adviceChain = $adviceChains['Neos\Flow\Aop\Advice\AroundAdvice'];
                $adviceChain->rewind();
                $joinPoint = new \Neos\Flow\Aop\JoinPoint($this, 'Neos\Media\Browser\Controller\ImageController', 'updateTagAction', $methodArguments, $adviceChain);
                $result = $adviceChain->proceed($joinPoint);
                $methodArguments = $joinPoint->getMethodArguments();

            } catch (\Exception $exception) {
                unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['updateTagAction']);
                throw $exception;
            }
            unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['updateTagAction']);
        }
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     * @param Tag $tag
     * @return void
     */
    public function deleteTagAction(\Neos\Media\Domain\Model\Tag $tag)
    {

        if (isset($this->Flow_Aop_Proxy_methodIsInAdviceMode['deleteTagAction'])) {
            $result = parent::deleteTagAction($tag);

        } else {
            $this->Flow_Aop_Proxy_methodIsInAdviceMode['deleteTagAction'] = true;
            try {
            
                $methodArguments = [];

                $methodArguments['tag'] = $tag;
            
                $adviceChains = $this->Flow_Aop_Proxy_getAdviceChains('deleteTagAction');
                $adviceChain = $adviceChains['Neos\Flow\Aop\Advice\AroundAdvice'];
                $adviceChain->rewind();
                $joinPoint = new \Neos\Flow\Aop\JoinPoint($this, 'Neos\Media\Browser\Controller\ImageController', 'deleteTagAction', $methodArguments, $adviceChain);
                $result = $adviceChain->proceed($joinPoint);
                $methodArguments = $joinPoint->getMethodArguments();

            } catch (\Exception $exception) {
                unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['deleteTagAction']);
                throw $exception;
            }
            unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['deleteTagAction']);
        }
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     * @param string $title
     * @return void
     * @\Neos\Flow\Annotations\Validate(type="NotEmpty", argumentName="title")
     * @\Neos\Flow\Annotations\Validate(type="Label", argumentName="title")
     */
    public function createAssetCollectionAction($title)
    {

        if (isset($this->Flow_Aop_Proxy_methodIsInAdviceMode['createAssetCollectionAction'])) {
            $result = parent::createAssetCollectionAction($title);

        } else {
            $this->Flow_Aop_Proxy_methodIsInAdviceMode['createAssetCollectionAction'] = true;
            try {
            
                $methodArguments = [];

                $methodArguments['title'] = $title;
            
                $adviceChains = $this->Flow_Aop_Proxy_getAdviceChains('createAssetCollectionAction');
                $adviceChain = $adviceChains['Neos\Flow\Aop\Advice\AroundAdvice'];
                $adviceChain->rewind();
                $joinPoint = new \Neos\Flow\Aop\JoinPoint($this, 'Neos\Media\Browser\Controller\ImageController', 'createAssetCollectionAction', $methodArguments, $adviceChain);
                $result = $adviceChain->proceed($joinPoint);
                $methodArguments = $joinPoint->getMethodArguments();

            } catch (\Exception $exception) {
                unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['createAssetCollectionAction']);
                throw $exception;
            }
            unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['createAssetCollectionAction']);
        }
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     * @param AssetCollection $assetCollection
     * @return void
     */
    public function editAssetCollectionAction(\Neos\Media\Domain\Model\AssetCollection $assetCollection)
    {

        if (isset($this->Flow_Aop_Proxy_methodIsInAdviceMode['editAssetCollectionAction'])) {
            $result = parent::editAssetCollectionAction($assetCollection);

        } else {
            $this->Flow_Aop_Proxy_methodIsInAdviceMode['editAssetCollectionAction'] = true;
            try {
            
                $methodArguments = [];

                $methodArguments['assetCollection'] = $assetCollection;
            
                $adviceChains = $this->Flow_Aop_Proxy_getAdviceChains('editAssetCollectionAction');
                $adviceChain = $adviceChains['Neos\Flow\Aop\Advice\AroundAdvice'];
                $adviceChain->rewind();
                $joinPoint = new \Neos\Flow\Aop\JoinPoint($this, 'Neos\Media\Browser\Controller\ImageController', 'editAssetCollectionAction', $methodArguments, $adviceChain);
                $result = $adviceChain->proceed($joinPoint);
                $methodArguments = $joinPoint->getMethodArguments();

            } catch (\Exception $exception) {
                unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['editAssetCollectionAction']);
                throw $exception;
            }
            unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['editAssetCollectionAction']);
        }
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     * @param AssetCollection $assetCollection
     * @return void
     */
    public function updateAssetCollectionAction(\Neos\Media\Domain\Model\AssetCollection $assetCollection)
    {

        if (isset($this->Flow_Aop_Proxy_methodIsInAdviceMode['updateAssetCollectionAction'])) {
            $result = parent::updateAssetCollectionAction($assetCollection);

        } else {
            $this->Flow_Aop_Proxy_methodIsInAdviceMode['updateAssetCollectionAction'] = true;
            try {
            
                $methodArguments = [];

                $methodArguments['assetCollection'] = $assetCollection;
            
                $adviceChains = $this->Flow_Aop_Proxy_getAdviceChains('updateAssetCollectionAction');
                $adviceChain = $adviceChains['Neos\Flow\Aop\Advice\AroundAdvice'];
                $adviceChain->rewind();
                $joinPoint = new \Neos\Flow\Aop\JoinPoint($this, 'Neos\Media\Browser\Controller\ImageController', 'updateAssetCollectionAction', $methodArguments, $adviceChain);
                $result = $adviceChain->proceed($joinPoint);
                $methodArguments = $joinPoint->getMethodArguments();

            } catch (\Exception $exception) {
                unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['updateAssetCollectionAction']);
                throw $exception;
            }
            unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['updateAssetCollectionAction']);
        }
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     * @param AssetCollection $assetCollection
     * @return void
     */
    public function deleteAssetCollectionAction(\Neos\Media\Domain\Model\AssetCollection $assetCollection)
    {

        if (isset($this->Flow_Aop_Proxy_methodIsInAdviceMode['deleteAssetCollectionAction'])) {
            $result = parent::deleteAssetCollectionAction($assetCollection);

        } else {
            $this->Flow_Aop_Proxy_methodIsInAdviceMode['deleteAssetCollectionAction'] = true;
            try {
            
                $methodArguments = [];

                $methodArguments['assetCollection'] = $assetCollection;
            
                $adviceChains = $this->Flow_Aop_Proxy_getAdviceChains('deleteAssetCollectionAction');
                $adviceChain = $adviceChains['Neos\Flow\Aop\Advice\AroundAdvice'];
                $adviceChain->rewind();
                $joinPoint = new \Neos\Flow\Aop\JoinPoint($this, 'Neos\Media\Browser\Controller\ImageController', 'deleteAssetCollectionAction', $methodArguments, $adviceChain);
                $result = $adviceChain->proceed($joinPoint);
                $methodArguments = $joinPoint->getMethodArguments();

            } catch (\Exception $exception) {
                unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['deleteAssetCollectionAction']);
                throw $exception;
            }
            unset($this->Flow_Aop_Proxy_methodIsInAdviceMode['deleteAssetCollectionAction']);
        }
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __sleep()
    {
            $result = NULL;
        $this->Flow_Object_PropertiesToSerialize = array();

        $transientProperties = array (
);
        $propertyVarTags = array (
  'assetRepository' => 'Neos\\Media\\Domain\\Repository\\ImageRepository',
  'importedAssetRepository' => '\\Neos\\Media\\Domain\\Repository\\ImportedAssetRepository',
  'viewFormatToObjectNameMap' => 'array',
  'siteRepository' => 'Neos\\Neos\\Domain\\Repository\\SiteRepository',
  'domainRepository' => 'Neos\\Neos\\Domain\\Repository\\DomainRepository',
  'tagRepository' => 'Neos\\Media\\Domain\\Repository\\TagRepository',
  'assetCollectionRepository' => 'Neos\\Media\\Domain\\Repository\\AssetCollectionRepository',
  'packageManager' => 'Neos\\Flow\\Package\\PackageManagerInterface',
  'browserState' => 'Neos\\Media\\Browser\\Domain\\Session\\BrowserState',
  'assetService' => 'Neos\\Media\\Domain\\Service\\AssetService',
  'translator' => 'Neos\\Flow\\I18n\\Translator',
  'assetSourcesConfiguration' => 'array',
  'assetSources' => 'AssetSourceInterface[]',
  'objectManager' => 'Neos\\Flow\\ObjectManagement\\ObjectManagerInterface',
  'reflectionService' => 'Neos\\Flow\\Reflection\\ReflectionService',
  'mvcPropertyMappingConfigurationService' => 'Neos\\Flow\\Mvc\\Controller\\MvcPropertyMappingConfigurationService',
  'viewConfigurationManager' => 'Neos\\Flow\\Mvc\\ViewConfigurationManager',
  'view' => 'Neos\\Flow\\Mvc\\View\\ViewInterface',
  'viewObjectNamePattern' => 'string',
  'defaultViewObjectName' => 'string',
  'defaultViewImplementation' => 'string',
  'actionMethodName' => 'string',
  'errorMethodName' => 'string',
  'settings' => 'array',
  'systemLogger' => 'Neos\\Flow\\Log\\SystemLoggerInterface',
  'logger' => 'Psr\\Log\\LoggerInterface',
  'uriBuilder' => 'Neos\\Flow\\Mvc\\Routing\\UriBuilder',
  'validatorResolver' => 'Neos\\Flow\\Validation\\ValidatorResolver',
  'request' => 'Neos\\Flow\\Mvc\\ActionRequest',
  'response' => 'Neos\\Flow\\Http\\Response',
  'arguments' => 'Neos\\Flow\\Mvc\\Controller\\Arguments',
  'controllerContext' => 'Neos\\Flow\\Mvc\\Controller\\ControllerContext',
  'flashMessageContainer' => 'Neos\\Flow\\Mvc\\FlashMessageContainer',
  'persistenceManager' => 'Neos\\Flow\\Persistence\\PersistenceManagerInterface',
  'supportedMediaTypes' => 'array',
  '_contextFactory' => '\\Neos\\Neos\\Domain\\Service\\ContentContextFactory',
  '_siteRepository' => '\\Neos\\Neos\\Domain\\Repository\\SiteRepository',
  '_localizationService' => '\\Neos\\Flow\\I18n\\Service',
  '_userService' => '\\Neos\\Neos\\Service\\UserService',
);
        $result = $this->Flow_serializeRelatedEntities($transientProperties, $propertyVarTags);
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     */
    private function Flow_Proxy_injectProperties()
    {
        $this->injectSettings(\Neos\Flow\Core\Bootstrap::$staticObjectManager->get(\Neos\Flow\Configuration\ConfigurationManager::class)->getConfiguration('Settings', 'Neos.Media.Browser'));
        $this->injectLogger(\Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Psr\Log\LoggerInterface'));
        $this->Flow_Proxy_LazyPropertyInjection('Neos\Media\Domain\Repository\ImageRepository', 'Neos\Media\Domain\Repository\ImageRepository', 'assetRepository', '33339ceb76d9e5c1379db44d4d4723fd', function() { return \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Media\Domain\Repository\ImageRepository'); });
        $this->Flow_Proxy_LazyPropertyInjection('Neos\Media\Domain\Repository\ImportedAssetRepository', 'Neos\Media\Domain\Repository\ImportedAssetRepository', 'importedAssetRepository', '663a5f5ad5a4995b3de0fb5853bd6e81', function() { return \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Media\Domain\Repository\ImportedAssetRepository'); });
        $this->Flow_Proxy_LazyPropertyInjection('Neos\Neos\Domain\Repository\SiteRepository', 'Neos\Neos\Domain\Repository\SiteRepository', 'siteRepository', '42785f5eca4dff104f1860b84f531a9f', function() { return \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Neos\Domain\Repository\SiteRepository'); });
        $this->Flow_Proxy_LazyPropertyInjection('Neos\Neos\Domain\Repository\DomainRepository', 'Neos\Neos\Domain\Repository\DomainRepository', 'domainRepository', '37b1b7f7b2d5d92dae299591af3b7e10', function() { return \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Neos\Domain\Repository\DomainRepository'); });
        $this->Flow_Proxy_LazyPropertyInjection('Neos\Media\Domain\Repository\TagRepository', 'Neos\Media\Domain\Repository\TagRepository', 'tagRepository', '4cf01dea3b6190efe49ffdcb9a0ab644', function() { return \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Media\Domain\Repository\TagRepository'); });
        $this->Flow_Proxy_LazyPropertyInjection('Neos\Media\Domain\Repository\AssetCollectionRepository', 'Neos\Media\Domain\Repository\AssetCollectionRepository', 'assetCollectionRepository', '75dd022c88117120d3ec81cf84770446', function() { return \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Media\Domain\Repository\AssetCollectionRepository'); });
        $this->Flow_Proxy_LazyPropertyInjection('Neos\Flow\Package\PackageManagerInterface', 'Neos\Flow\Package\PackageManager', 'packageManager', 'b44be8eaae4695ec4f42edfbf6f8880a', function() { return \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Flow\Package\PackageManagerInterface'); });
        $this->browserState = \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Media\Browser\Domain\Session\BrowserState');
        $this->Flow_Proxy_LazyPropertyInjection('Neos\Media\Domain\Service\AssetService', 'Neos\Media\Domain\Service\AssetService', 'assetService', 'b8a3f9ba29596737396943e4de630328', function() { return \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Media\Domain\Service\AssetService'); });
        $this->Flow_Proxy_LazyPropertyInjection('Neos\Flow\I18n\Translator', 'Neos\Flow\I18n\Translator', 'translator', 'a1556ebf8488dcff234496272bb811f7', function() { return \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Flow\I18n\Translator'); });
        $this->Flow_Proxy_LazyPropertyInjection('Neos\Flow\ObjectManagement\ObjectManagerInterface', 'Neos\Flow\ObjectManagement\ObjectManager', 'objectManager', '9524ff5e5332c1890aa361e5d186b7b6', function() { return \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Flow\ObjectManagement\ObjectManagerInterface'); });
        $this->Flow_Proxy_LazyPropertyInjection('Neos\Flow\Reflection\ReflectionService', 'Neos\Flow\Reflection\ReflectionService', 'reflectionService', '464c26aa94c66579c050985566cbfc1f', function() { return \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Flow\Reflection\ReflectionService'); });
        $this->Flow_Proxy_LazyPropertyInjection('Neos\Flow\Mvc\Controller\MvcPropertyMappingConfigurationService', 'Neos\Flow\Mvc\Controller\MvcPropertyMappingConfigurationService', 'mvcPropertyMappingConfigurationService', '245f31ad31ca22b8c2b2255e0f65f847', function() { return \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Flow\Mvc\Controller\MvcPropertyMappingConfigurationService'); });
        $this->Flow_Proxy_LazyPropertyInjection('Neos\Flow\Mvc\ViewConfigurationManager', 'Neos\Flow\Mvc\ViewConfigurationManager', 'viewConfigurationManager', '40e27e95b530777b9b476762cf735a69', function() { return \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Flow\Mvc\ViewConfigurationManager'); });
        $this->Flow_Proxy_LazyPropertyInjection('Neos\Flow\Log\SystemLoggerInterface', 'Neos\Flow\Log\Logger', 'systemLogger', '717e9de4d0309f4f47c821b9257eb5c2', function() { return \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Flow\Log\SystemLoggerInterface'); });
        $this->Flow_Proxy_LazyPropertyInjection('Neos\Flow\Validation\ValidatorResolver', 'Neos\Flow\Validation\ValidatorResolver', 'validatorResolver', 'e992f50de62d81bfe770d5c5f1242621', function() { return \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Flow\Validation\ValidatorResolver'); });
        $this->Flow_Proxy_LazyPropertyInjection('Neos\Flow\Mvc\FlashMessageContainer', 'Neos\Flow\Mvc\FlashMessageContainer', 'flashMessageContainer', 'a5f5265657df54eb081324fb2ff5b8e1', function() { return \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Flow\Mvc\FlashMessageContainer'); });
        $this->Flow_Proxy_LazyPropertyInjection('Neos\Flow\Persistence\PersistenceManagerInterface', 'Neos\Flow\Persistence\Doctrine\PersistenceManager', 'persistenceManager', '8a72b773ea2cb98c2933df44c659da06', function() { return \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Flow\Persistence\PersistenceManagerInterface'); });
        $this->Flow_Proxy_LazyPropertyInjection('Neos\Neos\Domain\Service\ContentContextFactory', 'Neos\Neos\Domain\Service\ContentContextFactory', '_contextFactory', 'bf6447fb48e80589ca3a024bc3882005', function() { return \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Neos\Domain\Service\ContentContextFactory'); });
        $this->Flow_Proxy_LazyPropertyInjection('Neos\Neos\Domain\Repository\SiteRepository', 'Neos\Neos\Domain\Repository\SiteRepository', '_siteRepository', '42785f5eca4dff104f1860b84f531a9f', function() { return \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Neos\Domain\Repository\SiteRepository'); });
        $this->Flow_Proxy_LazyPropertyInjection('Neos\Flow\I18n\Service', 'Neos\Flow\I18n\Service', '_localizationService', 'bdcad09aa1b6973b35f2987887987892', function() { return \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Flow\I18n\Service'); });
        $this->Flow_Proxy_LazyPropertyInjection('Neos\Neos\Service\UserService', 'Neos\Neos\Service\UserService', '_userService', '3af75a289d0337400c3d43d557f82c49', function() { return \Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Neos\Service\UserService'); });
        $this->assetSourcesConfiguration = \Neos\Flow\Core\Bootstrap::$staticObjectManager->get(\Neos\Flow\Configuration\ConfigurationManager::class)->getConfiguration('Settings', 'Neos.Media.assetSources');
        $this->defaultViewImplementation = \Neos\Flow\Core\Bootstrap::$staticObjectManager->get(\Neos\Flow\Configuration\ConfigurationManager::class)->getConfiguration('Settings', 'Neos.Flow.mvc.view.defaultImplementation');
        $this->Flow_Injected_Properties = array (
  0 => 'settings',
  1 => 'logger',
  2 => 'assetRepository',
  3 => 'importedAssetRepository',
  4 => 'siteRepository',
  5 => 'domainRepository',
  6 => 'tagRepository',
  7 => 'assetCollectionRepository',
  8 => 'packageManager',
  9 => 'browserState',
  10 => 'assetService',
  11 => 'translator',
  12 => 'objectManager',
  13 => 'reflectionService',
  14 => 'mvcPropertyMappingConfigurationService',
  15 => 'viewConfigurationManager',
  16 => 'systemLogger',
  17 => 'validatorResolver',
  18 => 'flashMessageContainer',
  19 => 'persistenceManager',
  20 => '_contextFactory',
  21 => '_siteRepository',
  22 => '_localizationService',
  23 => '_userService',
  24 => 'assetSourcesConfiguration',
  25 => 'defaultViewImplementation',
);
    }

    /**
     * Autogenerated Proxy Method
     * @param ObjectManagerInterface $objectManager
     * @return array Array of method parameters by action name
     * @\Neos\Flow\Annotations\CompileStatic
     */
    static public function getActionMethodParameters($objectManager)
    {

return array (
  'editAction' => 
  array (
    'assetSourceIdentifier' => 
    array (
      'position' => 0,
      'optional' => true,
      'type' => 'string',
      'class' => NULL,
      'array' => false,
      'byReference' => false,
      'allowsNull' => true,
      'defaultValue' => NULL,
      'scalarDeclaration' => true,
    ),
    'assetProxyIdentifier' => 
    array (
      'position' => 1,
      'optional' => true,
      'type' => 'string',
      'class' => NULL,
      'array' => false,
      'byReference' => false,
      'allowsNull' => true,
      'defaultValue' => NULL,
      'scalarDeclaration' => true,
    ),
    'asset' => 
    array (
      'position' => 2,
      'optional' => true,
      'type' => 'Neos\\Media\\Domain\\Model\\Asset',
      'class' => 'Neos\\Media\\Domain\\Model\\Asset',
      'array' => false,
      'byReference' => false,
      'allowsNull' => true,
      'defaultValue' => NULL,
      'scalarDeclaration' => false,
    ),
  ),
  'indexAction' => 
  array (
    'view' => 
    array (
      'position' => 0,
      'optional' => true,
      'type' => 'string',
      'class' => NULL,
      'array' => false,
      'byReference' => false,
      'allowsNull' => true,
      'defaultValue' => NULL,
      'scalarDeclaration' => false,
    ),
    'sortBy' => 
    array (
      'position' => 1,
      'optional' => true,
      'type' => 'string',
      'class' => NULL,
      'array' => false,
      'byReference' => false,
      'allowsNull' => true,
      'defaultValue' => NULL,
      'scalarDeclaration' => false,
    ),
    'sortDirection' => 
    array (
      'position' => 2,
      'optional' => true,
      'type' => 'string',
      'class' => NULL,
      'array' => false,
      'byReference' => false,
      'allowsNull' => true,
      'defaultValue' => NULL,
      'scalarDeclaration' => false,
    ),
    'filter' => 
    array (
      'position' => 3,
      'optional' => true,
      'type' => 'string',
      'class' => NULL,
      'array' => false,
      'byReference' => false,
      'allowsNull' => true,
      'defaultValue' => NULL,
      'scalarDeclaration' => false,
    ),
    'tagMode' => 
    array (
      'position' => 4,
      'optional' => true,
      'type' => 'integer',
      'class' => NULL,
      'array' => false,
      'byReference' => false,
      'allowsNull' => true,
      'defaultValue' => 0,
      'scalarDeclaration' => false,
    ),
    'tag' => 
    array (
      'position' => 5,
      'optional' => true,
      'type' => 'Neos\\Media\\Domain\\Model\\Tag',
      'class' => 'Neos\\Media\\Domain\\Model\\Tag',
      'array' => false,
      'byReference' => false,
      'allowsNull' => true,
      'defaultValue' => NULL,
      'scalarDeclaration' => false,
    ),
    'searchTerm' => 
    array (
      'position' => 6,
      'optional' => true,
      'type' => 'string',
      'class' => NULL,
      'array' => false,
      'byReference' => false,
      'allowsNull' => true,
      'defaultValue' => NULL,
      'scalarDeclaration' => false,
    ),
    'collectionMode' => 
    array (
      'position' => 7,
      'optional' => true,
      'type' => 'integer',
      'class' => NULL,
      'array' => false,
      'byReference' => false,
      'allowsNull' => true,
      'defaultValue' => 0,
      'scalarDeclaration' => false,
    ),
    'assetCollection' => 
    array (
      'position' => 8,
      'optional' => true,
      'type' => 'Neos\\Media\\Domain\\Model\\AssetCollection',
      'class' => 'Neos\\Media\\Domain\\Model\\AssetCollection',
      'array' => false,
      'byReference' => false,
      'allowsNull' => true,
      'defaultValue' => NULL,
      'scalarDeclaration' => false,
    ),
    'assetSourceIdentifier' => 
    array (
      'position' => 9,
      'optional' => true,
      'type' => 'string',
      'class' => NULL,
      'array' => false,
      'byReference' => false,
      'allowsNull' => true,
      'defaultValue' => NULL,
      'scalarDeclaration' => false,
    ),
  ),
  'newAction' => 
  array (
  ),
  'replaceAssetResourceAction' => 
  array (
    'asset' => 
    array (
      'position' => 0,
      'optional' => false,
      'type' => 'Neos\\Media\\Domain\\Model\\Asset',
      'class' => 'Neos\\Media\\Domain\\Model\\Asset',
      'array' => false,
      'byReference' => false,
      'allowsNull' => false,
      'defaultValue' => NULL,
      'scalarDeclaration' => false,
    ),
  ),
  'showAction' => 
  array (
    'assetSourceIdentifier' => 
    array (
      'position' => 0,
      'optional' => false,
      'type' => 'string',
      'class' => NULL,
      'array' => false,
      'byReference' => false,
      'allowsNull' => false,
      'defaultValue' => NULL,
      'scalarDeclaration' => true,
    ),
    'assetProxyIdentifier' => 
    array (
      'position' => 1,
      'optional' => false,
      'type' => 'string',
      'class' => NULL,
      'array' => false,
      'byReference' => false,
      'allowsNull' => false,
      'defaultValue' => NULL,
      'scalarDeclaration' => true,
    ),
  ),
  'initializeUpdateAction' => 
  array (
  ),
  'updateAction' => 
  array (
    'asset' => 
    array (
      'position' => 0,
      'optional' => false,
      'type' => 'Neos\\Media\\Domain\\Model\\Asset',
      'class' => 'Neos\\Media\\Domain\\Model\\Asset',
      'array' => false,
      'byReference' => false,
      'allowsNull' => false,
      'defaultValue' => NULL,
      'scalarDeclaration' => false,
    ),
  ),
  'initializeCreateAction' => 
  array (
  ),
  'createAction' => 
  array (
    'asset' => 
    array (
      'position' => 0,
      'optional' => false,
      'type' => 'Neos\\Media\\Domain\\Model\\Asset',
      'class' => 'Neos\\Media\\Domain\\Model\\Asset',
      'array' => false,
      'byReference' => false,
      'allowsNull' => false,
      'defaultValue' => NULL,
      'scalarDeclaration' => false,
    ),
  ),
  'initializeUploadAction' => 
  array (
  ),
  'uploadAction' => 
  array (
    'asset' => 
    array (
      'position' => 0,
      'optional' => false,
      'type' => 'Neos\\Media\\Domain\\Model\\Asset',
      'class' => 'Neos\\Media\\Domain\\Model\\Asset',
      'array' => false,
      'byReference' => false,
      'allowsNull' => false,
      'defaultValue' => NULL,
      'scalarDeclaration' => false,
    ),
  ),
  'tagAssetAction' => 
  array (
    'asset' => 
    array (
      'position' => 0,
      'optional' => false,
      'type' => 'Neos\\Media\\Domain\\Model\\Asset',
      'class' => 'Neos\\Media\\Domain\\Model\\Asset',
      'array' => false,
      'byReference' => false,
      'allowsNull' => false,
      'defaultValue' => NULL,
      'scalarDeclaration' => false,
    ),
    'tag' => 
    array (
      'position' => 1,
      'optional' => false,
      'type' => 'Neos\\Media\\Domain\\Model\\Tag',
      'class' => 'Neos\\Media\\Domain\\Model\\Tag',
      'array' => false,
      'byReference' => false,
      'allowsNull' => false,
      'defaultValue' => NULL,
      'scalarDeclaration' => false,
    ),
  ),
  'addAssetToCollectionAction' => 
  array (
    'asset' => 
    array (
      'position' => 0,
      'optional' => false,
      'type' => 'Neos\\Media\\Domain\\Model\\Asset',
      'class' => 'Neos\\Media\\Domain\\Model\\Asset',
      'array' => false,
      'byReference' => false,
      'allowsNull' => false,
      'defaultValue' => NULL,
      'scalarDeclaration' => false,
    ),
    'assetCollection' => 
    array (
      'position' => 1,
      'optional' => false,
      'type' => 'Neos\\Media\\Domain\\Model\\AssetCollection',
      'class' => 'Neos\\Media\\Domain\\Model\\AssetCollection',
      'array' => false,
      'byReference' => false,
      'allowsNull' => false,
      'defaultValue' => NULL,
      'scalarDeclaration' => false,
    ),
  ),
  'deleteAction' => 
  array (
    'asset' => 
    array (
      'position' => 0,
      'optional' => false,
      'type' => 'Neos\\Media\\Domain\\Model\\Asset',
      'class' => 'Neos\\Media\\Domain\\Model\\Asset',
      'array' => false,
      'byReference' => false,
      'allowsNull' => false,
      'defaultValue' => NULL,
      'scalarDeclaration' => false,
    ),
  ),
  'updateAssetResourceAction' => 
  array (
    'asset' => 
    array (
      'position' => 0,
      'optional' => false,
      'type' => 'Neos\\Media\\Domain\\Model\\AssetInterface',
      'class' => 'Neos\\Media\\Domain\\Model\\AssetInterface',
      'array' => false,
      'byReference' => false,
      'allowsNull' => false,
      'defaultValue' => NULL,
      'scalarDeclaration' => false,
    ),
    'resource' => 
    array (
      'position' => 1,
      'optional' => false,
      'type' => 'Neos\\Flow\\ResourceManagement\\PersistentResource',
      'class' => 'Neos\\Flow\\ResourceManagement\\PersistentResource',
      'array' => false,
      'byReference' => false,
      'allowsNull' => false,
      'defaultValue' => NULL,
      'scalarDeclaration' => false,
    ),
    'options' => 
    array (
      'position' => 2,
      'optional' => true,
      'type' => 'array',
      'class' => NULL,
      'array' => true,
      'byReference' => false,
      'allowsNull' => false,
      'defaultValue' => 
      array (
      ),
      'scalarDeclaration' => false,
    ),
  ),
  'relatedNodesAction' => 
  array (
    'asset' => 
    array (
      'position' => 0,
      'optional' => false,
      'type' => 'Neos\\Media\\Domain\\Model\\AssetInterface',
      'class' => 'Neos\\Media\\Domain\\Model\\AssetInterface',
      'array' => false,
      'byReference' => false,
      'allowsNull' => false,
      'defaultValue' => NULL,
      'scalarDeclaration' => false,
    ),
  ),
  'createTagAction' => 
  array (
    'label' => 
    array (
      'position' => 0,
      'optional' => false,
      'type' => 'string',
      'class' => NULL,
      'array' => false,
      'byReference' => false,
      'allowsNull' => true,
      'defaultValue' => NULL,
      'scalarDeclaration' => false,
    ),
  ),
  'editTagAction' => 
  array (
    'tag' => 
    array (
      'position' => 0,
      'optional' => false,
      'type' => 'Neos\\Media\\Domain\\Model\\Tag',
      'class' => 'Neos\\Media\\Domain\\Model\\Tag',
      'array' => false,
      'byReference' => false,
      'allowsNull' => false,
      'defaultValue' => NULL,
      'scalarDeclaration' => false,
    ),
  ),
  'updateTagAction' => 
  array (
    'tag' => 
    array (
      'position' => 0,
      'optional' => false,
      'type' => 'Neos\\Media\\Domain\\Model\\Tag',
      'class' => 'Neos\\Media\\Domain\\Model\\Tag',
      'array' => false,
      'byReference' => false,
      'allowsNull' => false,
      'defaultValue' => NULL,
      'scalarDeclaration' => false,
    ),
  ),
  'deleteTagAction' => 
  array (
    'tag' => 
    array (
      'position' => 0,
      'optional' => false,
      'type' => 'Neos\\Media\\Domain\\Model\\Tag',
      'class' => 'Neos\\Media\\Domain\\Model\\Tag',
      'array' => false,
      'byReference' => false,
      'allowsNull' => false,
      'defaultValue' => NULL,
      'scalarDeclaration' => false,
    ),
  ),
  'createAssetCollectionAction' => 
  array (
    'title' => 
    array (
      'position' => 0,
      'optional' => false,
      'type' => 'string',
      'class' => NULL,
      'array' => false,
      'byReference' => false,
      'allowsNull' => true,
      'defaultValue' => NULL,
      'scalarDeclaration' => false,
    ),
  ),
  'editAssetCollectionAction' => 
  array (
    'assetCollection' => 
    array (
      'position' => 0,
      'optional' => false,
      'type' => 'Neos\\Media\\Domain\\Model\\AssetCollection',
      'class' => 'Neos\\Media\\Domain\\Model\\AssetCollection',
      'array' => false,
      'byReference' => false,
      'allowsNull' => false,
      'defaultValue' => NULL,
      'scalarDeclaration' => false,
    ),
  ),
  'updateAssetCollectionAction' => 
  array (
    'assetCollection' => 
    array (
      'position' => 0,
      'optional' => false,
      'type' => 'Neos\\Media\\Domain\\Model\\AssetCollection',
      'class' => 'Neos\\Media\\Domain\\Model\\AssetCollection',
      'array' => false,
      'byReference' => false,
      'allowsNull' => false,
      'defaultValue' => NULL,
      'scalarDeclaration' => false,
    ),
  ),
  'deleteAssetCollectionAction' => 
  array (
    'assetCollection' => 
    array (
      'position' => 0,
      'optional' => false,
      'type' => 'Neos\\Media\\Domain\\Model\\AssetCollection',
      'class' => 'Neos\\Media\\Domain\\Model\\AssetCollection',
      'array' => false,
      'byReference' => false,
      'allowsNull' => false,
      'defaultValue' => NULL,
      'scalarDeclaration' => false,
    ),
  ),
  'errorAction' => 
  array (
  ),
  'initializeAction' => 
  array (
  ),
);
    }

    /**
     * Autogenerated Proxy Method
     * @param ObjectManagerInterface $objectManager
     * @return array Array of validation groups by action method name
     * @\Neos\Flow\Annotations\CompileStatic
     */
    static public function getActionValidationGroups($objectManager)
    {

return array (
);
    }

    /**
     * Autogenerated Proxy Method
     * @param ObjectManagerInterface $objectManager
     * @return array Array of validate annotation parameters by action method name
     * @\Neos\Flow\Annotations\CompileStatic
     */
    static public function getActionValidateAnnotationData($objectManager)
    {

return array (
  'editAction' => 
  array (
  ),
  'indexAction' => 
  array (
  ),
  'newAction' => 
  array (
  ),
  'replaceAssetResourceAction' => 
  array (
  ),
  'showAction' => 
  array (
  ),
  'initializeUpdateAction' => 
  array (
  ),
  'updateAction' => 
  array (
  ),
  'initializeCreateAction' => 
  array (
  ),
  'createAction' => 
  array (
  ),
  'initializeUploadAction' => 
  array (
  ),
  'uploadAction' => 
  array (
  ),
  'tagAssetAction' => 
  array (
  ),
  'addAssetToCollectionAction' => 
  array (
  ),
  'deleteAction' => 
  array (
  ),
  'updateAssetResourceAction' => 
  array (
  ),
  'relatedNodesAction' => 
  array (
  ),
  'createTagAction' => 
  array (
    0 => 
    array (
      'type' => 'NotEmpty',
      'options' => 
      array (
      ),
      'argumentName' => 'label',
    ),
    1 => 
    array (
      'type' => 'Label',
      'options' => 
      array (
      ),
      'argumentName' => 'label',
    ),
  ),
  'editTagAction' => 
  array (
  ),
  'updateTagAction' => 
  array (
  ),
  'deleteTagAction' => 
  array (
  ),
  'createAssetCollectionAction' => 
  array (
    0 => 
    array (
      'type' => 'NotEmpty',
      'options' => 
      array (
      ),
      'argumentName' => 'title',
    ),
    1 => 
    array (
      'type' => 'Label',
      'options' => 
      array (
      ),
      'argumentName' => 'title',
    ),
  ),
  'editAssetCollectionAction' => 
  array (
  ),
  'updateAssetCollectionAction' => 
  array (
  ),
  'deleteAssetCollectionAction' => 
  array (
  ),
  'errorAction' => 
  array (
  ),
  'initializeAction' => 
  array (
  ),
);
    }

    /**
     * Autogenerated Proxy Method
     * @param ObjectManagerInterface $objectManager
     * @return array Array of argument names as key by action method name
     * @\Neos\Flow\Annotations\CompileStatic
     */
    static public function getActionIgnoredValidationArguments($objectManager)
    {

return array (
);
    }

    /**
     * Autogenerated Proxy Method
     * @param ObjectManagerInterface $objectManager
     * @return array Array of all public action method names, indexed by method name
     * @\Neos\Flow\Annotations\CompileStatic
     */
    static public function getPublicActionMethods($objectManager)
    {

return array (
  'editAction' => true,
  'indexAction' => true,
  'newAction' => true,
  'replaceAssetResourceAction' => true,
  'showAction' => true,
  'updateAction' => true,
  'createAction' => true,
  'uploadAction' => true,
  'tagAssetAction' => true,
  'addAssetToCollectionAction' => true,
  'deleteAction' => true,
  'updateAssetResourceAction' => true,
  'relatedNodesAction' => true,
  'createTagAction' => true,
  'editTagAction' => true,
  'updateTagAction' => true,
  'deleteTagAction' => true,
  'createAssetCollectionAction' => true,
  'editAssetCollectionAction' => true,
  'updateAssetCollectionAction' => true,
  'deleteAssetCollectionAction' => true,
);
    }
}
# PathAndFilename: C:\Bitnami\neos-4.1.7-neu\apps\neos\htdocs\Packages\Application\Neos.Media.Browser\Classes\Controller\ImageController.php
#