<?php 
namespace Neos\Setup\ViewHelpers\Widget;

/*
 * This file is part of the Neos.Setup package.
 *
 * (c) Contributors of the Neos Project - www.neos.io
 *
 * This package is Open Source Software. For the full copyright and license
 * information, please view the LICENSE file which was distributed with this
 * source code.
 */

use Neos\Flow\Annotations as Flow;

/**
 * Simple widget that checks given database credentials and returns a list of available database names via AJAX
 */
class DatabaseSelectorViewHelper_Original extends \Neos\FluidAdaptor\Core\Widget\AbstractWidgetViewHelper
{
    /**
     * @var boolean
     */
    protected $ajaxWidget = true;

    /**
     * @Flow\Inject
     * @var \Neos\Setup\ViewHelpers\Widget\Controller\DatabaseSelectorController
     */
    protected $controller;

    /**
     * Don't create a session for this widget
     * Note: You then need to manually add the serialized configuration data to your links, by
     * setting "includeWidgetContext" to TRUE in the widget link and URI ViewHelpers!
     *
     * @var boolean
     */
    protected $storeConfigurationInSession = false;

    /**
     *
     * @param string $driverDropdownFieldId id of the DB driver input field
     * @param string $userFieldId id of the DB username input field
     * @param string $passwordFieldId id of the DB password input field
     * @param string $hostFieldId id of the DB host input field
     * @param string $dbNameTextFieldId id of the input field for the db name (fallback)
     * @param string $dbNameDropdownFieldId id of the select field for the fetched db names (this is hidden by default)
     * @param string $statusContainerId id of the element displaying AJAX status (gets class "loading", "success" or "error" depending on the state)
     * @param string $metadataStatusContainerId id of the element displaying status information of the selected database (gets class "loading", "success" or "error" depending on the state)
     * @return string
     */
    public function render($driverDropdownFieldId, $userFieldId, $passwordFieldId, $hostFieldId, $dbNameTextFieldId, $dbNameDropdownFieldId, $statusContainerId, $metadataStatusContainerId)
    {
        return $this->initiateSubRequest();
    }
}

#
# Start of Flow generated Proxy code
#
namespace Neos\Setup\ViewHelpers\Widget;

use Doctrine\ORM\Mapping as ORM;
use Neos\Flow\Annotations as Flow;

/**
 * Simple widget that checks given database credentials and returns a list of available database names via AJAX
 */
class DatabaseSelectorViewHelper extends DatabaseSelectorViewHelper_Original implements \Neos\Flow\ObjectManagement\Proxy\ProxyInterface {

    use \Neos\Flow\ObjectManagement\Proxy\ObjectSerializationTrait, \Neos\Flow\ObjectManagement\DependencyInjection\PropertyInjectionTrait;


    /**
     * Autogenerated Proxy Method
     */
    public function __construct()
    {
        if ('Neos\Setup\ViewHelpers\Widget\DatabaseSelectorViewHelper' === get_class($this)) {
            $this->Flow_Proxy_injectProperties();
        }
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __sleep()
    {
            $result = NULL;
        $this->Flow_Object_PropertiesToSerialize = array();

        $transientProperties = array (
);
        $propertyVarTags = array (
  'ajaxWidget' => 'boolean',
  'controller' => '\\Neos\\Setup\\ViewHelpers\\Widget\\Controller\\DatabaseSelectorController',
  'storeConfigurationInSession' => 'boolean',
  'escapeOutput' => 'boolean',
  'controllerContext' => 'Neos\\Flow\\Mvc\\Controller\\ControllerContext',
  'objectManager' => 'Neos\\Flow\\ObjectManagement\\ObjectManagerInterface',
  'systemLogger' => 'Neos\\Flow\\Log\\SystemLoggerInterface',
  'logger' => 'Psr\\Log\\LoggerInterface',
  'argumentDefinitions' => 'ArgumentDefinition[]',
  'viewHelperNode' => 'TYPO3Fluid\\Fluid\\Core\\Parser\\SyntaxTree\\ViewHelperNode',
  'arguments' => 'array',
  'childNodes' => 'NodeInterface[] array',
  'templateVariableContainer' => 'TYPO3Fluid\\Fluid\\Core\\Variables\\VariableProviderInterface',
  'renderingContext' => 'TYPO3Fluid\\Fluid\\Core\\Rendering\\RenderingContextInterface',
  'renderChildrenClosure' => '\\Closure',
  'viewHelperVariableContainer' => 'TYPO3Fluid\\Fluid\\Core\\ViewHelper\\ViewHelperVariableContainer',
  'escapeChildren' => 'boolean',
);
        $result = $this->Flow_serializeRelatedEntities($transientProperties, $propertyVarTags);
        return $result;
    }

    /**
     * Autogenerated Proxy Method
     */
    public function __wakeup()
    {

        $this->Flow_setRelatedEntities();
        $this->Flow_Proxy_injectProperties();
    }

    /**
     * Autogenerated Proxy Method
     */
    private function Flow_Proxy_injectProperties()
    {
        $this->injectAjaxWidgetContextHolder(\Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\FluidAdaptor\Core\Widget\AjaxWidgetContextHolder'));
        $this->injectWidgetContext(new \Neos\FluidAdaptor\Core\Widget\WidgetContext());
        $this->injectObjectManager(\Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Flow\ObjectManagement\ObjectManagerInterface'));
        $this->injectSystemLogger(\Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Neos\Flow\Log\SystemLoggerInterface'));
        $this->injectLogger(\Neos\Flow\Core\Bootstrap::$staticObjectManager->get('Psr\Log\LoggerInterface'));
        $this->controller = new \Neos\Setup\ViewHelpers\Widget\Controller\DatabaseSelectorController();
        $this->Flow_Injected_Properties = array (
  0 => 'ajaxWidgetContextHolder',
  1 => 'widgetContext',
  2 => 'objectManager',
  3 => 'systemLogger',
  4 => 'logger',
  5 => 'controller',
);
    }

    /**
     * Autogenerated Proxy Method
     * @param ObjectManagerInterface $objectManager
     * @return ArgumentDefinition[]
     * @throws \Neos\FluidAdaptor\Core\Exception
     * @\Neos\Flow\Annotations\CompileStatic
     */
    static public function getRenderMethodArgumentDefinitions(\Neos\Flow\ObjectManagement\ObjectManagerInterface $objectManager)
    {

return array (
  'driverDropdownFieldId' => 
  array (
    0 => 'driverDropdownFieldId',
    1 => 'string',
    2 => 'id of the DB driver input field',
    3 => true,
    4 => NULL,
    5 => true,
  ),
  'userFieldId' => 
  array (
    0 => 'userFieldId',
    1 => 'string',
    2 => 'id of the DB username input field',
    3 => true,
    4 => NULL,
    5 => true,
  ),
  'passwordFieldId' => 
  array (
    0 => 'passwordFieldId',
    1 => 'string',
    2 => 'id of the DB password input field',
    3 => true,
    4 => NULL,
    5 => true,
  ),
  'hostFieldId' => 
  array (
    0 => 'hostFieldId',
    1 => 'string',
    2 => 'id of the DB host input field',
    3 => true,
    4 => NULL,
    5 => true,
  ),
  'dbNameTextFieldId' => 
  array (
    0 => 'dbNameTextFieldId',
    1 => 'string',
    2 => 'id of the input field for the db name (fallback)',
    3 => true,
    4 => NULL,
    5 => true,
  ),
  'dbNameDropdownFieldId' => 
  array (
    0 => 'dbNameDropdownFieldId',
    1 => 'string',
    2 => 'id of the select field for the fetched db names (this is hidden by default)',
    3 => true,
    4 => NULL,
    5 => true,
  ),
  'statusContainerId' => 
  array (
    0 => 'statusContainerId',
    1 => 'string',
    2 => 'id of the element displaying AJAX status (gets class "loading", "success" or "error" depending on the state)',
    3 => true,
    4 => NULL,
    5 => true,
  ),
  'metadataStatusContainerId' => 
  array (
    0 => 'metadataStatusContainerId',
    1 => 'string',
    2 => 'id of the element displaying status information of the selected database (gets class "loading", "success" or "error" depending on the state)',
    3 => true,
    4 => NULL,
    5 => true,
  ),
);
    }
}
# PathAndFilename: C:\Bitnami\neos-4.1.7-neu\apps\neos\htdocs\Packages\Application\Neos.Setup\Classes\ViewHelpers\Widget\DatabaseSelectorViewHelper.php
#